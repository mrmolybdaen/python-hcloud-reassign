# This file contains a list of test jobs

##
# Linters and code style checker
##

# Run ruff against code (This includes Linting for code style and syntax)
test:ruff:
  stage: linters
  image: "pipelinecomponents/ruff:latest"
  rules:
    - if: $CI_PIPELINE_SOURCE != "trigger"
  script:
    - pip install -r requirements.txt
    - ruff check src/*

# Codestyle with flake8 and the flake8-black plugin
test:flake8:
  stage: linters
  image: "pipelinecomponents/flake8:latest"
  rules:
    - if: $CI_PIPELINE_SOURCE != "trigger"
  script:
    - pip install flake8-docstrings flake8-black flake8-bandit flake8-bugbear
    - pip install -r requirements.txt
    - flake8 --version
    - flake8 --black-config tests/style/.black --config tests/linters/.flake8 --color always --benchmark
  cache: []

# This is just to get information on the changes black would make.
test:black:
  stage: linters
  image: "pipelinecomponents/black:latest"
  rules:
    - if: $CI_PIPELINE_SOURCE != "trigger"
  script:
    - black --version
    - black --config tests/style/.black --check . --diff --color
  cache: []

# Lint code
test:pylint:
  stage: linters
  image: "pipelinecomponents/pylint:latest"
  rules:
    - if: $CI_PIPELINE_SOURCE != "trigger"
  script:
    - pip install -r requirements.txt
    - pylint --version
    - pylint --rcfile tests/linters/.pylintrc src/ -f colorized
  cache: []

# Run pytest on different Python Versions
test:pytest:
  stage: test
  image: "python:$IMAGE_TAG"
  parallel:
    matrix:
      IMAGE_TAG:
        - "latest"
        - "3.13"
        - "3.12"
        - "3.11"
  coverage: '/TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  script:
    # Install build and test dependencies
    - python3 -m pip install -r requirements-build.txt
    # Build a dev instance of the Python package
    - python3 -m build
    # Install the dev package into the current interpreter library
    - python3 -m pip install dist/*.whl
    # Run the tests
    - python3 -m pytest --cov
